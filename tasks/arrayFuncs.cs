using System;

namespace tasks{
        public class arrayFuncs{ //usefulMethods
        public static int countPairsWhere<T>(T[] arr, Func<T, T, bool> pred){ // counts number of pairs of subsequent elements that satisfy a property
            int cnt = 0;
            for (int i = 0; i < arr.Length - 1; ++i){
                if (pred(arr[i], arr[i + 1])) ++cnt;
            }
            return cnt;
        }
        public static int countWhere<T>(T[] arr, Func<T, bool> pred){ // counts number of elements that satisfy a property
            int cnt = 0;
            foreach (var e in arr)
                if (pred(e)) ++cnt;
            return cnt;
        }
        public static void fillArray<T>(out T[] arr, int n, Func<int, T> gen){ // fills array with elements generated by gen
            arr = new T[n];
            for (int i = 0; i < n; ++i){
                arr[i] = gen(i);
            }
        }
        public static T[] generateArray<T>(Func<int, T> gen, int n){ // returns an array filled with elements generated by gen
            T[] arr = new T[n];
            for (int i = 0; i < n; ++i){
                arr[i] = gen(i);
            }
            return arr;
        }
        public static void print(string[] arr, string str = ""){
            Console.Write(str + " ");
            for (int i = 0; i < arr.Length; ++i){
                Console.Write(arr[i] + " ");
            }
            Console.Write("\r\n");
        }
        public static void print(int[] arr, string str = ""){
            print(Array.ConvertAll(arr, a => a.ToString()), str);
        }
        public static int max(int[] arr){
            if (arr == null || arr.Length == 0) throw new Exception("array is empty or is null");
            int max = arr[0];
            for (int i = 0; i < arr.Length; ++i)
                if (max < arr[i]) max = arr[i];
            return max;
        }
        public static void forEach<T>(ref T[] arr, Func<T, T> f){ // applies f to every element of an array
            for(int i = 0; i < arr.Length; ++i){
                arr[i] = f(arr[i]);
            }
        }
    }

    public class intArray1D{
        private int[] arr;

        public int Sum { // (task 3)
            get {
                int s = 0;
                foreach(int e in arr){
                    s += e;
            }
            return s;
        } }

        public intArray1D(int initial, int step, int N){ // filling array with arithmetic progression (task 3)
            initial -= step;
            arrayFuncs.fillArray(out arr, N, (i) => initial += step);
        }
        public int[] inverse(){ // (task 3)
            return arrayFuncs.generateArray((i) => -arr[i], arr.Length); 
        }
        public void multi(int m){ // (task 3)
            arrayFuncs.forEach(ref arr, a => m*a);
        }
        public int maxCount(){ // returns number of elements equal to the maximum element
            int mx = arrayFuncs.max(arr);
            return arrayFuncs.countWhere(arr, a => a == mx);
        }
        public void print(string line = ""){
            Console.Write(line + " ");
            foreach(int e in arr){
                Console.Write(e + " ");
            }
            Console.Write("\r\n");
        }
    }
}